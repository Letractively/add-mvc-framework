#summary Getting Started with add mvc
#labels Phase-Deploy,Featured

= Skill Requirements =

The required skills to use this framework
   * Object Oriented PHP
   * Smarty PHP Templating

Additional skills that will help:
   * ADOdb PHP database abstraction

= Basic Files =
== Config ==
First you need a config variable:
{{{
<?php
$C = (object) array(
      'environment_status' => 'development',
   );
}}}

Either you put it on a new file (eg. config.php) or on the main root execution file (eg. add.php)

In this example it is necessary that to declare "add_dir" so on add.php it can be used to require "init.php" of the add mvc framework.

== Main Execution File ==

Then you'll need to create the main execution file (eg. add.php):
{{{
<?php

require '../config.php';

require 'includes/frameworks/add/init.php';

add::current_controller()->execute();

}}}

add::current_controller() returns the current controller according to the current path, and execute() is the execution function, as the name implies.

If you want to make your own process and just use some functions of ADD MVC (or is not familliar with the MVC environment yet), you can replace the current controller execution ( add::current_controller()->execute() ) with your own code


== .htaccess Rewrite ==
and create an htaccess rewrite, notice that "add.php" is used, depending on the name of your _main execution file_
{{{
RewriteEngine On

RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.+)$ add.php?add_mvc_path=$1&%{QUERY_STRING} [L]
RewriteRule ^$ add.php?add_mvc_path=$1&%{QUERY_STRING} [L]
}}}

= Making Pages/Resources =

To make pages/resources, a controller and a view (or one of them) with the same basename should be made

== Your First Controller ==
To overwrite the default index page, you should make <ctrl_page_index.class.php> file under your includes/classes directory.

Example:

{{{
<?php
/**
 * The home page
 */
CLASS ctrl_page_index EXTENDS ctrl_tpl_page {
/* (no dynamic [php] code) */
}
}}}

For more info go to [controllers Controllers wiki]


== Views ==
ADD MVC uses smarty templating engine on the View, the view names are the same as the controller's basename.

{{{
{*SMARTY*}
{extends file='common_layout.tpl'}
{block name=main}
   <h1>Simple Example</h1>
   <p>Hi! This is a very simple implementation of ADD MVC Framework.</p>

   <p>Just edit <b>{$C->views_dir|replace:'\\':'/'}/{$current_view}</b> to change the view</p>

   <p>You can also edit the controller: <b>{$current_controller}.class.php</b></p>

   <p>current UTC time: <b>{"Y-m-d h:i:s"|date:$utc_timestamp}</b></p>

{/block}
}}}

For more information go to [popularLibraries#Smarty Libraries: Smarty chapter]



---------------



= Accessing the Database =

Accessing database in ADD MVC is done by models, models, in ADD MVC framework represent a table from the database. For example we have a table named "companies"

It is recommended that these models uses ADODB returned by there db() method.

== Your ADODB connection ==
before models could work, you will need to get the ADODB connection:
{{{
CLASS my_adodb_mysql EXTENDS add_adodb_mysql {
   /**
    * Connect
    *
    */
   public function Connect() {

      $this->adodb->Connect(
            add::config()->mysql_host,
            add::config()->mysql_username,
            add::config()->mysql_password,
            add::config()->mysql_db_name
         );

      return $this;
   }
}
}}}

For more information, see the [popularLibraries#ADOdb Libraries ADOdb Chapter]

== Your First Model ==
{{{
/**
 * A model representing `members` table
 */
CLASS member EXTENDS model_auth {
   /**
    * The table of this model
    */
   const TABLE = 'members';
   /**
    * The primary key of this model
    */
   const TABLE_PK = 'id';
   /**
    * The db abstraction layer
    */
   public static function db() {
      return my_adodb_mysql::singleton();
   }
}
}}}

note that it extends a preset extra model model_auth, but the very basic model you can extend is model_rwd. You can also extend model_r (read only) and other extra models like model_image_rwd

Another example:
{{{
/**
 * model of company table
 */
CLASS company EXTENDS model_rwd {
   /**
    * the table of this model
    */
   const TABLE = 'companies';

   /**
    * the primary key of this model
    */
   const TABLE_PK = 'company_id';

   /**
    * The db abstraction layer
    */
   public static function db() {
      return my_adodb_mssql::singleton();
   }
}
}}}

model_rwd contains loads of functions for manipulating data from the database.

note that, all the fields on company table are being fetched. This might be adjustable in the future versions, but that's the way it is as of now.



=== Using models ===

{{{
/**
 * A homepage of a membership website, getting the current logged in user and a featured member
 *
 *
 * @uses member model
 */
CLASS ctrl_page_index EXTENDS ctrl_tpl_page {
   /**
    * The pre-response process
    */
   public function process_data() {

      # Getting the current logged in
      $this->assign('current_member',member::current_logged_in());

      # Getting member #1
      $this->assign('featured_member',member::get_instance(1));
   }

}
}}}

Another Example:
getting all the rows from the database (or SELECT `*` )
{{{

$companies = company::get_all();

foreach ($companies as $company) {
   echo "$company->company_name"; # print the company_name field
}

}}}

For more information about models, go to [models Models Page]